
CC := gcc
CFLAGS := -Wall -Werror -std=c11 -g -MMD -MP -fprofile-arcs -ftest-coverage -lncurses
LDFLAGS := -lgcov --coverage -lncurses
MKDIR_P := mkdir -p


MAIN_TARGET := chess
MAIN_SRCS := main.c game.c board.c piece.c move_handler.c renderer.c

# Tests compilation target and its source files
TEST_TARGET := tests/all_tests
TEST_SRCS := game.c board.c piece.c move_handler.c renderer.c \
	 tests/all_tests.c tests/test_game.c tests/test_board.c tests/test_piece.c tests/move_handler.c tests/renderer.c

# Build directory
BUILD_DIR := ./build
# Names of object files
MAIN_OBJS := $(addprefix $(BUILD_DIR)/,$(MAIN_SRCS:.c=.o))
TEST_OBJS := $(addprefix $(BUILD_DIR)/,$(TEST_SRCS:.c=.o))
ALL_OBJS = $(MAIN_OBJS) $(TEST_OBJS)

# Main tasks
.PHONY: all build build_tests test coverage clean

# Build everything
all: build build_tests

# Build game
build: $(BUILD_DIR)/$(MAIN_TARGET)

# Build tests
build_tests: $(BUILD_DIR)/$(TEST_TARGET)

# Run tests
test: build/tests/all_tests
	$<  # Just run the source

# Calculate test coverage
coverage:
	gcov $(MAIN_OBJS)

clean:
	$(RM) -r $(BUILD_DIR)
	$(RM) *.gcov

# Compiling targets
$(BUILD_DIR)/$(MAIN_TARGET): $(MAIN_OBJS)
	$(CC) -o $@ $(LDFLAGS) $^ -lncurses

$(BUILD_DIR)/$(TEST_TARGET): $(TEST_OBJS)
	$(CC) -o $@ $(LDFLAGS) $^ -lncurses

# Compiling individual modules
$(BUILD_DIR)/%.o: %.c
	$(MKDIR_P) $(dir $@)
	$(CC) -c -o $@ $(CFLAGS) $<

# Include dependency information generated by GCC
DEPS := $(ALL_OBJS:.o=.d)
-include $(DEPS)

